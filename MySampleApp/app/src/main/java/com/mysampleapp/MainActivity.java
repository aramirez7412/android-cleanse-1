//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package com.mysampleapp;

import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;

import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.mysampleapp.demo.DemoConfiguration;
import com.mysampleapp.demo.HomeDemoFragment;
import com.mysampleapp.navigation.NavigationDrawer;
import com.squareup.picasso.Picasso;
import com.squareup.picasso.Target;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    /** Class name for log messages. */
    private final static String LOG_TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
    private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    private String jsonPlan1;
    private int    planInt; //not sure if will keep, used to tell menu fragment which plan for testing

    private Button   signOutButton;
    private Button   signInButton;


    User currentUser;

    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
            getSupportActionBar().setTitle(
                savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
        }
    }

    User LoadUser(String id){
        try {

            System.out.println(this.getFilesDir() + "/" + id + "/userInfo.ser");

            //File f = new File(this.getFilesDir() + "/" + id);
           //f.delete();

            FileInputStream fis = new FileInputStream (new File(this.getFilesDir() + "/" + id + "/userInfo.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);
            User retUser = (User) is.readObject();
            is.close();
            fis.close();

            System.out.println("successfully loaded user");

            return retUser;

        } catch (FileNotFoundException e) {
            System.out.println("user does not exist yet");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        return null;
    }


    boolean SaveUser(User user){
        FileOutputStream fos = null;
        try {

            File file = new File(this.getFilesDir() + "/" + currentUser.getUserId() + "/");

            file.mkdirs();
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }

            File outputFile = new File(file, "userInfo.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(user);
            os.close();
            fos.close();
            System.out.println("successfully saved user to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }



//    boolean SaveDefaultPlan(){
//        FileOutputStream fos = null;
//        try {
//
//
//            File file = new File(this.getFilesDir(), currentUser.getUserId());
//
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }
//
//            fos = this.openFileOutput(file.getName(), Context.MODE_PRIVATE);
//            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
//            ObjectOutputStream os = new ObjectOutputStream(fos);
//            os.writeObject(plan);
//            os.close();
//            fos.close();
//            System.out.println("successfully saved user to: " + file.getAbsolutePath());
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//            return false;
//        } catch (IOException e) {
//            e.printStackTrace();
//            return false;
//        }
//
//        return true;
//
//    }

    /**
     * Initializes the sign-in and sign-out buttons.
     */
    private void setupSignInButtons() {

        signOutButton = (Button) findViewById(R.id.button_signout);
        signOutButton.setOnClickListener(this);

        signInButton = (Button) findViewById(R.id.button_signin);
        signInButton.setOnClickListener(this);

        final boolean isUserSignedIn = identityManager.isUserSignedIn();
        signOutButton.setVisibility(isUserSignedIn ? View.VISIBLE : View.INVISIBLE);
        signInButton.setVisibility(!isUserSignedIn ? View.VISIBLE : View.INVISIBLE);

    }

    /**
     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
     * side of the screen.
     */
    private void setupNavigationMenu(final Bundle savedInstanceState) {
        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);

        // Create the navigation drawer.
        navigationDrawer = new NavigationDrawer(this, toolbar, drawerLayout, drawerItems,
            R.id.main_fragment_container);



        // Add navigation drawer menu items.
        // Home isn't a demo, but is fake as a demo.
        DemoConfiguration.DemoFeature home = new DemoConfiguration.DemoFeature();
        home.iconResId = R.drawable.home_icon;
        home.titleResId = R.string.main_nav_menu_item_home;
        navigationDrawer.addDemoFeatureToMenu(home);

navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Meal Tracker", R.drawable.meal_icon,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.icon_home, R.mipmap.icon_home, MealFragment.class)));


        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Water Tracker", R.drawable.water_tracker_icon,  R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,
                R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_water_fragment, R.mipmap.icon_home, R.mipmap.icon_home, WaterFragment.class)));

        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Quiz", R.drawable.question_mark_icon,  R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,
                R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_quiz_fragment, R.drawable.question_mark_icon, R.drawable.question_mark_icon, QuizFragment.class)));


        //DemoConfiguration.DemoFeature mealTracker = new DemoConfiguration.DemoFeature("Meal Tracker", R.mipmap.icon_home, R.string.main_nav_menu_item_meal_fragment,
                //R.string.main_nav_menu_item_meal_fragment, R.string.main_nav_menu_item_meal_fragment,
                //R.string.main_nav_menu_item_meal_fragment, R.string.main_nav_menu_item_meal_fragment,
               // new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.icon_home, R.mipmap.icon_home, MealFragment.class));

                //new DemoConfiguration.DemoFeature();
        //mealTracker.demos = new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.icon_home, R.mipmap.icon_home, MealFragment.class);
        //mealTracker.iconResId = R.mipmap.icon_home;
        //mealTracker.titleResId = R.string.main_nav_menu_item_meal_fragment;
        //mealTracker.poweredByResId

        //navigationDrawer.addDemoFeatureToMenu(mealTracker);

        for (DemoConfiguration.DemoFeature demoFeature : DemoConfiguration.getDemoFeatureList()) {
            navigationDrawer.addDemoFeatureToMenu(demoFeature);

        }
        setupSignInButtons();

        if (savedInstanceState == null) {
            // Add the home fragment to be displayed initially.
            navigationDrawer.showHome();
        }
    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.
        AWSMobileClient.initializeMobileClientIfNecessary(this);

        // Obtain a reference to the mobile client. It is created in the Application class.
        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
        identityManager = awsMobileClient.getIdentityManager();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);

        setupNavigationMenu(savedInstanceState);


        currentUser = new User();

        //will need to pull this from logged in user, guest will be defaulted
        currentUser.setUserId("guestUser");



        currentUser = LoadUser(currentUser.getUserId());

        if(currentUser == null){
            currentUser = new User();
            currentUser.setUserId("guestUser");
            currentUser.setUserName("Tim Allen");
            SaveUser(currentUser);
        }

//        //will need to check if online
//        IdentityManager.IdentityHandler idHandler = new IdentityManager.IdentityHandler() {
//            @Override
//            public void handleIdentityID(String identityId) throws IOException, JSONException {
//                currentUser = LoadUser(identityId);
//                if(currentUser == null){
//                    currentUser = new User();
//                    currentUser.setUserName(identityManager.getUserName());
//                    currentUser.setUserId(identityId);
//                    SaveUser(currentUser);
//                }
//            }
//
//            @Override
//            public void handleError(Exception exception) {
//                System.out.println("didnt work");
//
//            }
//        };
//
//        identityManager.getUserID(idHandler);




        //delete this after testing
        planInt = 0;
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (!AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
            // In the case that the activity is restarted by the OS after the application
            // is killed we must redirect to the splash activity to handle the sign-in flow.
          //  Intent intent = new Intent(this, SplashActivity.class);
          //  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
          //  startActivity(intent);
            return;
        }

        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.

        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, toolbar.getTitle());
        }
    }

    @Override
    public void onClick(final View view) {
        if (view == signOutButton) {
            // The user is currently signed in with a provider. Sign out of that provider.
            identityManager.signOut();
            // Show the sign-in button and hide the sign-out button.
            signOutButton.setVisibility(View.INVISIBLE);
            signInButton.setVisibility(View.VISIBLE);

            // Close the navigation drawer.
            navigationDrawer.closeDrawer();
            return;
        }
        if (view == signInButton) {
            // Start the sign-in activity. Do not finish this activity to allow the user to navigate back.
            startActivity(new Intent(this, SignInActivity.class));
            // Close the navigation drawer.
            navigationDrawer.closeDrawer();
            return;
        }
        // ... add any other button handling code here ...

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        
        if (navigationDrawer.isDrawerOpen()) {
            navigationDrawer.closeDrawer();
            return;
        }

        if (fragmentManager.getBackStackEntryCount() == 0) {

            if (fragmentManager.findFragmentByTag("Home Fragment") == null) {
                Fragment fragment;
                String fragmentName;


                // Clear back stack when navigating from the Nav Drawer.
                fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                fragment = new HomeFragment();
                fragmentName = "Home Fragment";


                getSupportFragmentManager()
                        .beginTransaction()
                        .replace(R.id.main_fragment_container, fragment, fragmentName)
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                        .commit();

                return;
            }

        }

        super.onBackPressed();
    }

    boolean isPlanEmpty(){
        return jsonPlan1.isEmpty();
    }

    void setPlan(String jsonString){
        jsonPlan1 = jsonString;
    }

    String getJSONPlan(){
        return jsonPlan1;
    }

    int getPlanInt(){
        return planInt;
    }

    void setPlanInt(int num){
        planInt =  num;
    }



    void switchToQuizFragment(){

        Fragment fragment;
        String fragmentName;

        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
       // fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

                fragment = new QuizFragment();
                fragmentName = "Quiz";

        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previous fragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function



    void switchToPurchaseFragment(String planInfo, String planDesc){

        Fragment fragment;
        String fragmentName;

        Bundle bundle = new Bundle();
        bundle.putString("planName", planInfo);
        bundle.putString("planDesc", planDesc);


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

        fragment = new PurchasePlanFragment();
        fragmentName = "Purchase Fragment";
        fragment.setArguments(bundle);



        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previousFragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function


    void switchToPlanFragment(){

        Fragment fragment;
        String fragmentName;


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        fragment = new MealFragment();
        fragmentName = "Meal Fragment";


        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .addToBackStack("previousFragment")
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

    String getUserId(){
        return currentUser.getUserId();
    }



}



