//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package com.mysamplecleanseapp;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.amazonaws.mobile.AWSMobileClient;
import com.amazonaws.mobile.user.IdentityManager;
import com.mysamplecleanseapp.demo.DemoConfiguration;
import com.mysamplecleanseapp.navigation.NavigationDrawer;
import com.mysamplecleanseapp.util.IabHelper;
import com.mysamplecleanseapp.util.IabResult;
import com.mysamplecleanseapp.util.Inventory;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    /** Class name for log messages. */
    private final static String LOG_TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
  //  private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    private String jsonPlan1;
    private int    planInt; //not sure if will keep, used to tell menu fragment which plan for testing

    private Button   signOutButton;
    private Button   signInButton;


    User currentUser;
    IabHelper mHelper;
    ProgressDialog progress;


    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
            getSupportActionBar().setTitle(
                savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
        }
    }

    User LoadUser(String id){
        try {

            System.out.println(this.getFilesDir() + "/" + id + "/userInfo.ser");

            //File f = new File(this.getFilesDir() + "/" + id);
           //f.delete();

            FileInputStream fis = new FileInputStream (new File(this.getFilesDir() + "/" + id + "/userInfo.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);
            User retUser = (User) is.readObject();
            is.close();
            fis.close();

            System.out.println("successfully loaded user");

            return retUser;

        } catch (FileNotFoundException e) {
            System.out.println("user does not exist yet");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        return null;
    }


    boolean SaveUser(User user){
        FileOutputStream fos = null;
        try {

            File file = new File(this.getFilesDir() + "/" + currentUser.getUserId() + "/");

            file.mkdirs();
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }

            File outputFile = new File(file, "userInfo.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(user);
            os.close();
            fos.close();
            System.out.println("successfully saved user to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }

    //will need to search all json links for each recipe set and check if that file exitsts or not, if it doesnt we will pull
    //the json, parse it, and then serialize the recipe set object to a file ---this fragment does not check it simply is testing
    //one parse every time
    boolean CreateTempRecipeSetForTesting() throws IOException {

        String jsonString = sendGET("http://52.52.65.150:8080/recipe/set/1");

        //fortesting keep like this
        //String jsonString = "[{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}],\"id\":\"d56a99f257da9bf6\"}]";
//String jsonString = "{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}]}";

        FileOutputStream fos = null;
        try {

            JSONObject obj = new JSONObject(jsonString);

            File file = new File(this.getFilesDir() + "/recipeSet/");

            file.mkdirs();
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }

            RecipeSet mySet = new RecipeSet(obj, getApplicationContext());

            File outputFile = new File(file, "genericSet.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(mySet);
            os.close();
            fos.close();
            System.out.println("successfully saved recipe set to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        } catch (JSONException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
        }

        return true;
    }



    boolean CreateTempRecipeSetForTestingMethod2(MealPlan mealPlan){

        //String jsonString = sendGET("link to json");

        //fortesting keep like this
        //String jsonString = "[{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}],\"id\":\"d56a99f257da9bf6\"}]";
        String jsonString = "{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}]}";

        FileOutputStream fos = null;
        try {


            File file = new File(this.getFilesDir() + "/recipeSet/");

            file.mkdirs();


            RecipeSet mySet = new RecipeSet();


            for (int i = 0; i < mealPlan.getDays(); i++) {
                for (int j = 0; j < mealPlan.getMealCountForDay(i); j++) {
                    if(!mealPlan.getMeal(i, j).getTitle().equals("Fast Metabolism Cleanse"))
                        mySet.addRecipe(mealPlan.getMeal(i, j));
                }
            }

            mySet.recipeSetTitle = "Generic Recipe Set";


            mySet.sort();

            File outputFile = new File(file, "genericSet.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(mySet);
            os.close();
            fos.close();
            System.out.println("successfully saved recipe set to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        }

        return true;
    }

    void CheckAndDownloadPurchasedRecipeSets(){

    }

    class DownloadPlan extends AsyncTask<MyTaskParams, Void, MyTaskParams> {


        @Override
        protected MyTaskParams doInBackground(MyTaskParams... params) {

            try {

                String GET_URL = params[0].jsonURL;
                Context c = params[0].context;
                String USER_AGENT = "Mozilla/5.0";
                // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";

                URL obj = new URL(GET_URL);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();
                con.setRequestMethod("GET");
                con.setRequestProperty("User-Agent", USER_AGENT);
                int responseCode = con.getResponseCode();
                System.out.println("GET Response Code :: " + responseCode);
                if (responseCode == HttpURLConnection.HTTP_OK) { // success
                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();
                    // print result
                    System.out.println(response.toString());

                    return new MyTaskParams(response.toString(), c);
                    //return response.toString();
                } else {
                    System.out.println("GET request not worked");
                    return null;
                }
            } catch (ProtocolException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }



            return null;
        }

        @Override
        protected void onPostExecute(MyTaskParams result) {

            Context c = result.context;


            FileOutputStream fos = null;
            Boolean test = false;
            MealPlan mealPlan = null;

            fos = null;
            try {

                setPlan(result.jsonURL);

                //initialize the jsonObject
                JSONObject jsonObject;
                jsonObject = new JSONObject(getJSONPlan());
                jsonObject = jsonObject.getJSONObject("MealPlan");

                System.out.println("before the parse");
                //parse the object and create a meal plan
                mealPlan = new MealPlan(jsonObject, c, progress);

                File file = new  File(c.getFilesDir() + "/" + getUserId(), "currentPlan.ser");

                File parent = file.getParentFile();
                if(!parent.exists() && !parent.mkdirs()){
                    throw new IllegalStateException("Couldn't create dir: " + parent);
                }

                fos = new FileOutputStream(file);
                // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
                ObjectOutputStream os = new ObjectOutputStream(fos);
                os.reset();
                os.writeObject(mealPlan);
                os.close();
                fos.close();
                System.out.println("successfully saved mealPlan to: somewhere"); //+ file.getAbsolutePath());


                System.out.println("grabbing generic recipes");
                CreateTempRecipeSetForTestingMethod2(mealPlan);


            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }


    }

    private static String sendGET(String GET_URL) throws IOException {


        String USER_AGENT = "Mozilla/5.0";
        // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";

        URL obj = new URL(GET_URL);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", USER_AGENT);
        int responseCode = con.getResponseCode();
        System.out.println("GET Response Code :: " + responseCode);
        if (responseCode == HttpURLConnection.HTTP_OK) { // success
            BufferedReader in = new BufferedReader(new InputStreamReader(
                    con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            // print result
            System.out.println(response.toString());
            return response.toString();
        } else {
            System.out.println("GET request not worked");
            return "";
        }

    }



//    boolean SaveDefaultPlan(){
//        FileOutputStream fos = null;
//        try {
//
//
//            File file = new File(this.getFilesDir(), currentUser.getUserId());
//
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }
//
//            fos = this.openFileOutput(file.getName(), Context.MODE_PRIVATE);
//            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
//            ObjectOutputStream os = new ObjectOutputStream(fos);
//            os.writeObject(plan);
//            os.close();
//            fos.close();
//            System.out.println("successfully saved user to: " + file.getAbsolutePath());
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//            return false;
//        } catch (IOException e) {
//            e.printStackTrace();
//            return false;
//        }
//
//        return true;
//
//    }

    /**
     * Initializes the sign-in and sign-out buttons.
     */
    private void setupSignInButtons() {

        signOutButton = (Button) findViewById(R.id.button_signout);
        signOutButton.setOnClickListener(this);

        signInButton = (Button) findViewById(R.id.button_signin);
        signInButton.setOnClickListener(this);

       // final boolean isUserSignedIn = identityManager.isUserSignedIn();
        //signOutButton.setVisibility(isUserSignedIn ? View.VISIBLE : View.INVISIBLE);
       // signInButton.setVisibility(!isUserSignedIn ? View.VISIBLE : View.INVISIBLE);

    }

    /**
     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
     * side of the screen.
     */
    private void setupNavigationMenu(final Bundle savedInstanceState) {
        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);

        // Create the navigation drawer.
        navigationDrawer = new NavigationDrawer(this, toolbar, drawerLayout, drawerItems,
            R.id.main_fragment_container);



        // Add navigation drawer menu items.
        // Home isn't a demo, but is fake as a demo.
        DemoConfiguration.DemoFeature home = new DemoConfiguration.DemoFeature();
        home.iconResId = R.drawable.purp_house;
        home.titleResId = R.string.main_nav_menu_item_home;
        navigationDrawer.addDemoFeatureToMenu(home);

navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Meal Tracker", R.drawable.icon_food_list,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.drawable.icon_food_list, R.drawable.icon_food_list, MealFragment.class)));


//        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Water Tracker", R.drawable.water_tracker_icon,  R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,
//                R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,  R.string.main_nav_menu_item_water_fragment,
//                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_water_fragment, R.mipmap.icon_home, R.mipmap.icon_home, WaterFragment.class)));
//
//        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Quiz", R.drawable.question_mark_icon,  R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,
//                R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,  R.string.main_nav_menu_item_quiz_fragment,
//                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_quiz_fragment, R.drawable.question_mark_icon, R.drawable.question_mark_icon, QuizFragment.class)));

        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Food List", R.drawable.icon_checklist,  R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,
                R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_food_list_fragment, R.drawable.icon_checklist, R.drawable.icon_checklist, FoodListFragment.class)));


//        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Recipe Store", R.drawable.question_mark_icon,  R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,
//                R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,
//                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_purchase_fragment, R.drawable.question_mark_icon, R.drawable.question_mark_icon, PurchasePlanFragment.class)));


        //DemoConfiguration.DemoFeature mealTracker = new DemoConfiguration.DemoFeature("Meal Tracker", R.mipmap.icon_home, R.string.main_nav_menu_item_meal_fragment,
                //R.string.main_nav_menu_item_meal_fragment, R.string.main_nav_menu_item_meal_fragment,
                //R.string.main_nav_menu_item_meal_fragment, R.string.main_nav_menu_item_meal_fragment,
               // new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.icon_home, R.mipmap.icon_home, MealFragment.class));

                //new DemoConfiguration.DemoFeature();
        //mealTracker.demos = new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.icon_home, R.mipmap.icon_home, MealFragment.class);
        //mealTracker.iconResId = R.mipmap.icon_home;
        //mealTracker.titleResId = R.string.main_nav_menu_item_meal_fragment;
        //mealTracker.poweredByResId

        //navigationDrawer.addDemoFeatureToMenu(mealTracker);

        for (DemoConfiguration.DemoFeature demoFeature : DemoConfiguration.getDemoFeatureList()) {
            navigationDrawer.addDemoFeatureToMenu(demoFeature);

        }
        setupSignInButtons();

        ((TextView) findViewById(R.id.userName)).setText("Guest");


        if (savedInstanceState == null) {
            // Add the home fragment to be displayed initially.
            navigationDrawer.showHome();
        }

    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        progress = new ProgressDialog(this);


        //for final product do not hard code this!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx8XiZ9iTtGcmSmYG8JkKd3U37rnxSjhlJYPnBESkMQ4izxSRfV+tNLD0CM+X3ki5D++doyvIh3gmbGrzhQBQCM/qtg5U6pYyPVJQvGmgQFPivWdB/c3dztNAzTqIb/5/iMBG1imQm+z6YYV7yM0xDtDtfA7Hyusuwi2s08FoI72Op8dYKtDX3Xu4bqRw8DAMAaByF+RQH2BWHOEKUatVWKBvjXaYqAl7M7kI36l2ui9KNXhMNeWdSEa+oyD0RODIrGfoeLrEtUOT4VEoVS4+DO3WysontP3HqOH9WQE8g7rH9aH+FwTs931wdK76vlwyD8nOZjoL5uTwA7VxEdMgQwIDAQAB";
        String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj9w0GqYOja+NDy+czZFyoYGCLXY/UeXNECPrIvR56IJDxTJED4o4Vfh5q6X2U+P7bRrnL9EUeRJxBUeXlw71bPZQA8dGYGhMtlgnBKmaQYAUYL5vEmZurSBB/jsyx6Udh6UEDSmnNjmLHvWf6JqIkzI07Y0QjLtEFeMRHoLzjzST1/s6d8CE5jarh+ENl1JJCHcZWo4nmPdd8dA9HUwug3wTdJMUjEOowxC0CYns334FNk2PBjsUrMHHw9OYzztqCYEjIUvT6K7bx9+qxml+W0B+QYvqPyFGxV+fN41Bb0VdVfzt3HRO3WqzEYXLyMAqoFD584cy0niyWWQBPW6NswIDAQAB";
        // compute your public key and store it in base64EncodedPublicKey
//        mHelper = new IabHelper(this, base64EncodedPublicKey);
//
//
//
//       final IabHelper.QueryInventoryFinishedListener mGotInventoryListener
//                = new IabHelper.QueryInventoryFinishedListener() {
//            public void onQueryInventoryFinished(IabResult result,
//                                                 Inventory inventory) {
//
//                if (result.isFailure()) {
//                    // handle error here
//                }
//                else {
//                    // does the user have the premium upgrade?
//                    boolean sampleBool = inventory.hasPurchase("recipetest1");
//                    // update UI accordingly
//                }
//            }
//        };
//
//
//
//        mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
//            public void onIabSetupFinished(IabResult result) {
//                if (!result.isSuccess()) {
//                    // Oh no, there was a problem.
//                    Log.d("Error", "Problem setting up In-app Billing: " + result);
//                }
//                else{
//                    System.out.println("successfully set up billing dawg");
//                }
//                // Hooray, IAB is fully set up!
//                try {
//                    mHelper.queryInventoryAsync(mGotInventoryListener);
//                } catch (IabHelper.IabAsyncInProgressException e) {
//                    e.printStackTrace();
//                }
//
//            }
//        });
//
//



        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.

       // AWSMobileClient.initializeMobileClientIfNecessary(this);

        // Obtain a reference to the mobile client. It is created in the Application class.
       // final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
       // identityManager = awsMobileClient.getIdentityManager();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);



        currentUser = new User();

        //will need to pull this from logged in user, guest will be defaulted
        currentUser.setUserId("guestUser");
        currentUser.setUserName("Guest");




        currentUser = LoadUser(currentUser.getUserId());



        if(currentUser == null){
            currentUser = new User();
            currentUser.setUserId("guestUser");
            currentUser.setUserName("Guest");
            SaveUser(currentUser);
            //CreateTempRecipeSetForTesting();
        }




        FileOutputStream fos = null;
        Boolean test = false;
        MealPlan mealPlan = null;
        try {

            FileInputStream fis = new FileInputStream(new File(this.getFilesDir() + "/" + getUserId(), "currentPlan.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);
            mealPlan = (MealPlan) is.readObject();


            //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
            is.close();
            fis.close();

            System.out.println("successfully loaded mealPlan");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            test = true;
        } catch (IOException e) {
            test = true;
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            test = true;
            e.printStackTrace();
        }

        if(test) {

            showWheel();

                //String jsonPlan = sendGET("http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans");
                DownloadPlan dl = new DownloadPlan();
            MyTaskParams mtp = new MyTaskParams("http://52.52.65.150:8080/mealplan", getApplicationContext());
                dl.execute(mtp);

        }

        setupNavigationMenu(savedInstanceState);


        ((TextView) findViewById(R.id.userName)).setText(currentUser.getUserName());



//        //will need to check if online
//        IdentityManager.IdentityHandler idHandler = new IdentityManager.IdentityHandler() {
//            @Override
//            public void handleIdentityID(String identityId) throws IOException, JSONException {
//                currentUser = LoadUser(identityId);
//                if(currentUser == null){
//                    currentUser = new User();
//                    currentUser.setUserName(identityManager.getUserName());
//                    currentUser.setUserId(identityId);
//                    SaveUser(currentUser);
//                }
//            }
//
//            @Override
//            public void handleError(Exception exception) {
//                System.out.println("didnt work");
//
//            }
//        };
//
//        identityManager.getUserID(idHandler);




        //delete this after testing
        planInt = 0;
    }

    @Override
    protected void onResume() {
        super.onResume();
//        if (!AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
//            // In the case that the activity is restarted by the OS after the application
//            // is killed we must redirect to the splash activity to handle the sign-in flow.
//          //  Intent intent = new Intent(this, SplashActivity.class);
//          //  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
//          //  startActivity(intent);
//            return;
//        }
//
//        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.

        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, toolbar.getTitle());
        }
    }

    @Override
    public void onClick(final View view) {
//        if (view == signOutButton) {
//            // The user is currently signed in with a provider. Sign out of that provider.
//            //identityManager.signOut();
//            // Show the sign-in button and hide the sign-out button.
//            signOutButton.setVisibility(View.INVISIBLE);
//            signInButton.setVisibility(View.VISIBLE);
//
//            // Close the navigation drawer.
//            navigationDrawer.closeDrawer();
//            return;
//        }
//        if (view == signInButton) {
//            // Start the sign-in activity. Do not finish this activity to allow the user to navigate back.
//            startActivity(new Intent(this, SignInActivity.class));
//            // Close the navigation drawer.
//            navigationDrawer.closeDrawer();
//            return;
//        }
        // ... add any other button handling code here ...

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
//        if (mHelper != null) try {
//            mHelper.dispose();
//        } catch (IabHelper.IabAsyncInProgressException e) {
//            e.printStackTrace();
//        }
//        mHelper = null;
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        
        if (navigationDrawer.isDrawerOpen()) {
            navigationDrawer.closeDrawer();
            return;
        }

        if (fragmentManager.getBackStackEntryCount() == 0) {

            if (fragmentManager.findFragmentByTag("Home Fragment") == null) {
                Fragment fragment;
                String fragmentName;


                // Clear back stack when navigating from the Nav Drawer.
                fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                fragment = new HomeFragment();
                fragmentName = "Home Fragment";


                getSupportFragmentManager()
                        .beginTransaction()
                        .replace(R.id.main_fragment_container, fragment, fragmentName)
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                        .commit();

                return;
            }

        }

        super.onBackPressed();
    }

    boolean isPlanEmpty(){
        return jsonPlan1.isEmpty();
    }

    void setPlan(String jsonString){
        jsonPlan1 = jsonString;
    }

    String getJSONPlan(){
        return jsonPlan1;
    }

    int getPlanInt(){
        return planInt;
    }

    void setPlanInt(int num){
        planInt =  num;
    }


    //need a function to return username from main
    {

    }

    void switchToQuizFragment(){

        Fragment fragment;
        String fragmentName;

        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
       // fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

                fragment = new QuizFragment();
                fragmentName = "Quiz";

        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previous fragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function



    void switchToPurchaseFragment(String planInfo, String planDesc){

        Fragment fragment;
        String fragmentName;

        Bundle bundle = new Bundle();
        bundle.putString("planName", planInfo);
        bundle.putString("planDesc", planDesc);


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

        fragment = new PurchasePlanFragment();
        fragmentName = "Purchase Fragment";
        fragment.setArguments(bundle);



        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previousFragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

    void switchToFoodListFragment(){

        Fragment fragment;
        String fragmentName;


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        fragment = new FoodListFragment();
        fragmentName = "Food List";


        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .addToBackStack("previousFragment")
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function


    void switchToPlanFragment(){

        Fragment fragment;
        String fragmentName;


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        fragment = new MealFragment();
        fragmentName = "Meal Fragment";


        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .addToBackStack("previousFragment")
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

    String getUserId(){
        return currentUser.getUserId();
    }

    public IabHelper getIabHelper(){
        return mHelper;
    }

    public void hideWheel(){

        progress.dismiss();
    }

    public void showWheel(){

        progress.setMessage("INITIALIZING FIRST TIME LAUNCH DATA...PLEASE WAIT) ");
        progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        progress.setIndeterminate(true);
        progress.show();
    }


}





