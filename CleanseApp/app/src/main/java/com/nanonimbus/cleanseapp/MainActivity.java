//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-android v0.7
//
package com.nanonimbus.cleanseapp;

import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.text.Layout;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;


import com.android.vending.billing.IInAppBillingService;
import com.nanonimbus.cleanseapp.demo.DemoConfiguration;
import com.nanonimbus.cleanseapp.navigation.NavigationDrawer;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.TimeUnit;


public class MainActivity extends AppCompatActivity implements View.OnClickListener {
    /** Class name for log messages. */
    private final static String LOG_TAG = MainActivity.class.getSimpleName();

    /** Bundle key for saving/restoring the toolbar title. */
    private final static String BUNDLE_KEY_TOOLBAR_TITLE = "title";

    /** The identity manager used to keep track of the current user account. */
  //  private IdentityManager identityManager;

    /** The toolbar view control. */
    private Toolbar toolbar;

    /** Our navigation drawer class for handling navigation drawer logic. */
    private NavigationDrawer navigationDrawer;

    /** The helper class used to toggle the left navigation drawer open and closed. */
    private ActionBarDrawerToggle drawerToggle;

    private String jsonPlan1;
    private int    planInt; //not sure if will keep, used to tell menu fragment which plan for testing

    private Button   signOutButton;
    private Button   signInButton;


    MealPlan mealPlan;

    User currentUser;
    ProgressDialog progress;
    String userEmail;

    ServiceConnection mServiceConn;

    IInAppBillingService mService;

    /**
     * Initializes the Toolbar for use with the activity.
     */
    private void setupToolbar(final Bundle savedInstanceState) {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        // Set up the activity to use this toolbar. As a side effect this sets the Toolbar's title
        // to the activity's title.
        setSupportActionBar(toolbar);

        if (savedInstanceState != null) {
            // Some IDEs such as Android Studio complain about possible NPE without this check.
            assert getSupportActionBar() != null;

            // Restore the Toolbar's title.
            getSupportActionBar().setTitle(
                savedInstanceState.getCharSequence(BUNDLE_KEY_TOOLBAR_TITLE));
        }
    }

    User LoadUser(String id){
        try {

            System.out.println(this.getFilesDir() + "/" + id + "/userInfo.ser");

            //File f = new File(this.getFilesDir() + "/" + id);
           //f.delete();

            FileInputStream fis = new FileInputStream (new File(this.getFilesDir() + "/" + id + "/userInfo.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);
            User retUser = (User) is.readObject();
            is.close();
            fis.close();

            System.out.println("successfully loaded user");

            return retUser;

        } catch (FileNotFoundException e) {
            System.out.println("user does not exist yet");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        return null;
    }


    boolean SaveUser(User user){
        FileOutputStream fos = null;
        try {

            File file = new File(this.getFilesDir() + "/" + currentUser.getUserId() + "/");

            file.mkdirs();
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }

            File outputFile = new File(file, "userInfo.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(user);
            os.close();
            fos.close();
            System.out.println("successfully saved user to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }


    void saveMealPlan(){
        FileOutputStream fos = null;
        try {



            fos = new FileOutputStream(new File(this.getFilesDir() + "/" + (getUserId() + "/currentPlan.ser")));
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.reset();
            os.writeObject(mealPlan);
            os.close();
            fos.close();


            FileInputStream fis = new FileInputStream(new File(this.getFilesDir() + "/" + getUserId() + "/currentPlan.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);


            is.close();
            fis.close();


        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }




    //will need to search all json links for each recipe set and check if that file exitsts or not, if it doesnt we will pull
    //the json, parse it, and then serialize the recipe set object to a file ---this fragment does not check it simply is testing
    //one parse every time
//    boolean CreateTempRecipeSetForTesting() throws IOException {
//
//        String jsonString = sendGET("http://52.52.65.150:8080/recipe/set/1");
//
//        //fortesting keep like this
//        //String jsonString = "[{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}],\"id\":\"d56a99f257da9bf6\"}]";
////String jsonString = "{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}]}";
//
//        FileOutputStream fos = null;
//        try {
//
//            JSONObject obj = new JSONObject(jsonString);
//
//            File file = new File(this.getFilesDir() + "/recipeSet/");
//
//            file.mkdirs();
////            File parent = file.getParentFile();
////            if(!parent.exists() && !parent.mkdirs()){
////                throw new IllegalStateException("Couldn't create dir: " + parent);
////            }
//
//            RecipeSet mySet = new RecipeSet(obj, getApplicationContext());
//
//            File outputFile = new File(file, "genericSet.ser");
//            fos = new FileOutputStream(outputFile);
//            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
//            ObjectOutputStream os = new ObjectOutputStream(fos);
//            os.writeObject(mySet);
//            os.close();
//            fos.close();
//            System.out.println("successfully saved recipe set to: " + outputFile.getAbsolutePath());
//        } catch (FileNotFoundException e) {
//            System.out.println("FAILED TO SAVE SET");
//            e.printStackTrace();
//            return false;
//        } catch (IOException e) {
//            System.out.println("FAILED TO SAVE SET");
//            e.printStackTrace();
//            return false;
//        } catch (JSONException e) {
//            System.out.println("FAILED TO SAVE SET");
//            e.printStackTrace();
//        }
//
//        return true;
//    }



    boolean CreateTempRecipeSetForTestingMethod2(MealPlan mealPlan){

        //String jsonString = sendGET("link to json");

        //fortesting keep like this
        //String jsonString = "[{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}],\"id\":\"d56a99f257da9bf6\"}]";
        //String jsonString = "{\"recipeSet\":\"Generic Recipe Set\", \"meals\":[{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Breakfast\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"OVERNIGHT STEEL-CUT OATS WITH PEACHES\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/oatmeal-peachFS.jpg\",\"recipe\":{\"serves\":\"4 to 8\",\"ingredients\":[\"1 cup steel-cut oats\",\"4 cups water\"],\"instructions\":\"Bring the water to a boil in a large saucepan. Add oats and boil 1 minute. Turn oï¬€ the heat, cover the pan and let it stand overnight at room temperature. In the morning, remove the lid and bring the oats to a boil. Reduce heat and simmer, stirring often, until the oats are creamy yet still a little bit chewy, about 7 to 10 minutes. Cooked oats will keep in the fridge for a week. You can just spoon out a serving, add a little water, and reheat in the microwave for a minute or two. Or you can make a huge batch and freeze single servings. For extra flavor add Â½ cup chopped peaches, Â½ teaspoon grated fresh ginger, and Â¼ teaspoon vanilla, or Â½ cup of your favorite fruit (from the food list) as a mix-in.\"}},{\"meal\":\"Fast Metabolism Cleanse\",\"time\":\"Lunch\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Shaker+Bottle.png\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"Cleanse Shake\"],\"instructions\":\"Using the scoop provided, mix two scoops of the Fast Metabolism Cleanse whole food powder with 8 to 12 ounces of spring water. You can do your mixing in a blender with ice, or by simply stirring the powder into water. You can add cinnamon, pure stevia, or birch xylitol as sweeteners. The beverage may replace a snack or meal as displayed in the sample menu.\"}},{\"meal\":\"Apple & 1/2 Cup Min. Celery Stalks\",\"time\":\"Snack\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/apple-celery.jpg\",\"recipe\":{\"serves\":\"1\",\"ingredients\":[\"1 Apple\",\"1/2 Cup Minced Celery Stalks\"],\"instructions\":\"Slice and dice!\"}},{\"meal\":\"Turkey or Buffalo Chili\",\"time\":\"Dinner\",\"imgurl\":\"https://s3-us-west-1.amazonaws.com/cleanse-app/Turkey+or+Buffalo+Chili.jpg\",\"recipe\":{\"serves\":\"6\",\"ingredients\":[\"1 to 1Â½ pounds lean ground turkey or buffalo meat\",\"Â½ cup diced red onion, (or more if desired)\",\"2 tablespoon parsley or cilantro\",\"1 heaping tablespoon chili powder\",\"1 tablespoon minced garlic\",\"Â½ teaspoon crushed red pepper ï¬‚akes\",\"15-ounce can white beans\",\"15-ounce can kidney beans\",\"15-ounce can black beans\",\"15-ounce can pinto beans\",\"15-ounce can lentils or adzuki beans\",\"4 cups chopped zucchini\",\"4 cups (32 ounces) organic bell pepper and tomato soup or plain tomato soup (just be sure it is not milk-based)\",\"1 heaping teaspoon sea salt\"],\"instructions\":\"Brown the turkey in a skillet and drain. Turn a slow cooker to high setting. Add the meat, onion, parsley, chili powder, garlic, and red pepper ï¬‚akes to the slow cooker pot. Stir, cover, and set the slow cooker aside. Open and partially drain all ï¬\u0081ve cans of beans; I leave a little liquid in to make the chili juicier. Add the beans, zucchini, and soup to the cooker. Stir well. Keep the cooker set on high for 4 to 5 hours, or adjust heat to low and simmer for 6 to 8 hours. Stir and taste occasionally, adjusting seasonings and adding salt as needed. A serving is 1Â½ cups.\"}}]}";

        FileOutputStream fos = null;
        try {


            File file = new File(this.getFilesDir() + "/recipeSet/");

            file.mkdirs();


            RecipeSet mySet = new RecipeSet();


            for (int i = 0; i < mealPlan.getDays(); i++) {
                for (int j = 0; j < mealPlan.getMealCountForDay(i); j++) {
                    if(!mealPlan.getMeal(i, j).getTitle().equals("Fast Metabolism Cleanse"))
                        mySet.addRecipe(mealPlan.getMeal(i, j));
                }
            }

            mySet.recipeSetTitle = "Generic Recipe Set";


            mySet.sort();

            File outputFile = new File(file, "genericSet.ser");
            fos = new FileOutputStream(outputFile);
            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
            ObjectOutputStream os = new ObjectOutputStream(fos);
            os.writeObject(mySet);
            os.close();
            fos.close();
            System.out.println("successfully saved recipe set to: " + outputFile.getAbsolutePath());
        } catch (FileNotFoundException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        } catch (IOException e) {
            System.out.println("FAILED TO SAVE SET");
            e.printStackTrace();
            return false;
        }

        return true;
    }

    void CheckAndDownloadPurchasedRecipeSets(){

    }

    class DownloadSet extends AsyncTask<MyTaskParams, Void, MyTaskParams> {


        @Override
        protected MyTaskParams doInBackground(MyTaskParams... params) {

            try {

                ArrayList<String> recipeSets = params[0].recipeList;
                ArrayList<String> newJsons = new ArrayList<>();
                currentlyDownloading = true;

                // String GET_URL = params[0].jsonURL;
                Context c = params[0].context;
                String USER_AGENT = "Mozilla/5.0";
                // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";

                for (int i = 0; i < recipeSets.size(); i++) {

                    URL obj = new URL(recipeSets.get(i));
                    HttpURLConnection con = (HttpURLConnection) obj.openConnection();
                    con.setRequestMethod("GET");
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    int responseCode = con.getResponseCode();
                    System.out.println("GET Response Code :: " + responseCode);
                    if (responseCode == HttpURLConnection.HTTP_OK) { // success
                        BufferedReader in = new BufferedReader(new InputStreamReader(
                                con.getInputStream()));
                        String inputLine;
                        StringBuffer response = new StringBuffer();

                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }
                        in.close();
                        // print result
                        System.out.println(response.toString());

                        newJsons.add(response.toString());

                    } else {
                        System.out.println("GET request not worked");
                        return null;
                    }
                }

                return new MyTaskParams(newJsons, c);


            } catch (ProtocolException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }



            return null;
        }

        @Override
        protected void onPostExecute(MyTaskParams result) {

            Context c = result.context;
            ArrayList<String> setsJson = result.recipeList;

            FileOutputStream fos = null;
            try {

                for (int i = 0; i < setsJson.size(); i++) {

                    File file = new File(c.getFilesDir() + "/recipeSet/");

                    file.mkdirs();


                    RecipeSet mySet = new RecipeSet(new JSONObject(setsJson.get(i)), c);



                    mySet.sort();

//will need better way to manage and save recipe set file names
                    File outputFile = new File(file, mySet.getRecipeSetSaveTitle());
                    fos = new FileOutputStream(outputFile);
                    // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
                    ObjectOutputStream os = new ObjectOutputStream(fos);
                    os.writeObject(mySet);
                    os.close();
                    fos.close();
                    System.out.println("successfully saved recipe set to: " + outputFile.getAbsolutePath());

                    //getSupportActionBar().show();
                    currentlyDownloading = false;
                    ((DrawerLayout) findViewById(R.id.drawer_layout)).setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);

                    //recipeSets.add(outputFile.getAbsolutePath());

                    //currentUser.addRecipeSetPath(outputFile.getAbsolutePath());
                    //need to determine when to add downloaded sets to user profile

                }


            } catch (FileNotFoundException e) {
                System.out.println("FAILED TO SAVE SET");
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println("FAILED TO SAVE SET");
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }

    }


    void helperDownloadSet(String id){
        MainActivity.DownloadSetAndAddToUser ds = new DownloadSetAndAddToUser();
        //ArrayList<String> sets = new ArrayList<>();

       //for testing delete this shit
       // id = ("original");
       // System.out.println("http://52.52.65.150:8080/recipe/set/" + id);


      //  sets.add("http://52.52.65.150:8080/recipe/set/" + id);
        //sets.add("http://52.52.65.150:8080/recipe/set/original");
        MyTaskParams mtp = new MyTaskParams("http://52.52.65.150:8080/recipe/set/" + id, id, this);
        ds.execute(mtp);
    }

    class DownloadSetAndAddToUser extends AsyncTask<MyTaskParams, Void, MyTaskParams> {


        @Override
        protected MyTaskParams doInBackground(MyTaskParams... params) {

            try {

                //ArrayList<String> recipeSets = params[0].recipeList;
                //ArrayList<String> newJsons = new ArrayList<>();
                String myURL = params[0].getURL();

                currentlyDownloading = true;


                // String GET_URL = params[0].jsonURL;
                Context c = params[0].context;
                String USER_AGENT = "Mozilla/5.0";
                // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";

               // for (int i = 0; i < recipeSets.size(); i++) {

                    URL obj = new URL(myURL);
                    HttpURLConnection con = (HttpURLConnection) obj.openConnection();
                    con.setRequestMethod("GET");
                    con.setRequestProperty("User-Agent", USER_AGENT);
                    int responseCode = con.getResponseCode();
                    System.out.println("GET Response Code :: " + responseCode);
                    if (responseCode == HttpURLConnection.HTTP_OK) { // success
                        BufferedReader in = new BufferedReader(new InputStreamReader(
                                con.getInputStream()));
                        String inputLine;
                        StringBuffer response = new StringBuffer();

                        while ((inputLine = in.readLine()) != null) {
                            response.append(inputLine);
                        }
                        in.close();
                        // print result
                        System.out.println("Key: " +  " Value: ");
                        System.out.println(response.toString());

                       return new MyTaskParams(response.toString(), params[0].getId(), getApplicationContext() );

                    } else {
                        System.out.println("GET request not worked");
                        return null;
                    }
                //}



            } catch (ProtocolException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }



            return null;
        }

        @Override
        protected void onPostExecute(MyTaskParams result) {

            Context c = result.context;
            //

            FileOutputStream fos = null;
            try {

                //for (int i = 0; i < setsJson.size(); i++) {

                    File file = new File(c.getFilesDir() + "/recipeSet/");

                    file.mkdirs();


                    RecipeSet mySet = new RecipeSet(new JSONObject(result.getURL()), c);



                    mySet.sort();

//will need better way to manage and save recipe set file names
                    File outputFile = new File(file, result.getId());
                    fos = new FileOutputStream(outputFile);
                    // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
                    ObjectOutputStream os = new ObjectOutputStream(fos);
                    os.writeObject(mySet);
                    os.close();
                    fos.close();


                if (!currentUser.checkIfSetIsAdded(outputFile.getAbsolutePath())) {
                    System.out.println("test added after downloading");
                    currentUser.addRecipeSetPath(outputFile.getAbsolutePath());
                    SaveUser(currentUser);
                }

                    //getSupportActionBar().show();
                    currentlyDownloading = false;
                    //((DrawerLayout) findViewById(R.id.drawer_layout)).setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);

                    Toast.makeText(getApplicationContext(),"Download Complete and Set has been added to collection!", Toast.LENGTH_SHORT).show();

                    //recipeSets.add(outputFile.getAbsolutePath());

                    //currentUser.addRecipeSetPath(outputFile.getAbsolutePath());
                    //need to determine when to add downloaded sets to user profile

                //}


            } catch (FileNotFoundException e) {
                System.out.println("FAILED TO SAVE SET");
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println("FAILED TO SAVE SET");
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        System.out.println("onActivityResult(" + requestCode + "," + resultCode + "," + data);

        super.onActivityResult(requestCode, resultCode, data);

        FragmentManager fragmentManager = getSupportFragmentManager();
        Fragment fragment = fragmentManager.findFragmentByTag("Recipe Store");
        if (fragment != null)
        {
            ((PurchaseFragment)fragment).onActivityResult(requestCode, resultCode,data);
        }
    }





    class DownloadPlan extends AsyncTask<MyTaskParams, Void, MyTaskParams> {


        @Override
        protected MyTaskParams doInBackground(MyTaskParams... params) {

            try {

                ((DrawerLayout) findViewById(R.id.drawer_layout)).setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);

                String GET_URL = params[0].jsonURL;
                Context c = params[0].context;
                String USER_AGENT = "Mozilla/5.0";
                // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";

                URL obj = new URL(GET_URL);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();
                con.setRequestMethod("GET");
                con.setRequestProperty("User-Agent", USER_AGENT);
                int responseCode = con.getResponseCode();
                System.out.println("GET Response Code :: " + responseCode);
                if (responseCode == HttpURLConnection.HTTP_OK) { // success
                    BufferedReader in = new BufferedReader(new InputStreamReader(
                            con.getInputStream()));
                    String inputLine;
                    StringBuffer response = new StringBuffer();

                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();
                    // print result
                    System.out.println(response.toString());

                    return new MyTaskParams(response.toString(), c);
                    //return response.toString();
                } else {
                    System.out.println("GET request not worked");
                    return null;
                }
            } catch (ProtocolException e) {
                e.printStackTrace();
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }



            return null;
        }

        @Override
        protected void onPostExecute(MyTaskParams result) {

            Context c = result.context;

            FileOutputStream fos = null;
            Boolean test = false;
            MealPlan mealPlan = null;

            fos = null;
            try {

                setPlan(result.jsonURL);

                //initialize the jsonObject
                JSONObject jsonObject;
                jsonObject = new JSONObject(getJSONPlan());
                jsonObject = jsonObject.getJSONObject("MealPlan");

                System.out.println("before the parse");
                //parse the object and create a meal plan
                mealPlan = new MealPlan(jsonObject, c, progress);

                File file = new  File(c.getFilesDir(), "defaultPlan.ser");

                File parent = file.getParentFile();
                if(!parent.exists() && !parent.mkdirs()){
                    throw new IllegalStateException("Couldn't create dir: " + parent);
                }

                for (int i = 0; i < mealPlan.getDays(); i++) {
                    dailyFacts.add(i, mealPlan.getDailyFacts(i));
                }

                fos = new FileOutputStream(file);
                // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
                ObjectOutputStream os = new ObjectOutputStream(fos);
                os.reset();
                os.writeObject(mealPlan);
                os.close();
                fos.close();
                System.out.println("successfully saved mealPlan to: somewhere"); //+ file.getAbsolutePath());


                //save to user profile
                //saveMealPlan();

                testCreateCurrentPlan();

                System.out.println("grabbing generic recipes");
               // CreateTempRecipeSetForTestingMethod2(mealPlan);

                DownloadSet ds = new DownloadSet();
                ArrayList<String> sets = new ArrayList<>();
                sets.add("http://52.52.65.150:8080/recipe/set/original");
                //sets.add("http://52.52.65.150:8080/recipe/set/original");
                MyTaskParams mtp = new MyTaskParams(sets, getApplicationContext());
                ds.execute(mtp);

                //automatically show homescreen after downloading all data
               // navigationDrawer.showHome();

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }

        }


    }

//    private static String sendGET(String GET_URL) throws IOException {
//
//
//        String USER_AGENT = "Mozilla/5.0";
//        // String GET_URL = "http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans";
//
//        URL obj = new URL(GET_URL);
//        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
//        con.setRequestMethod("GET");
//        con.setRequestProperty("User-Agent", USER_AGENT);
//        int responseCode = con.getResponseCode();
//        System.out.println("GET Response Code :: " + responseCode);
//        if (responseCode == HttpURLConnection.HTTP_OK) { // success
//            BufferedReader in = new BufferedReader(new InputStreamReader(
//                    con.getInputStream()));
//            String inputLine;
//            StringBuffer response = new StringBuffer();
//
//            while ((inputLine = in.readLine()) != null) {
//                response.append(inputLine);
//            }
//            in.close();
//            // print result
//            System.out.println(response.toString());
//            return response.toString();
//        } else {
//            System.out.println("GET request not worked");
//            return "";
//        }
//
//    }



//    boolean SaveDefaultPlan(){
//        FileOutputStream fos = null;
//        try {
//
//
//            File file = new File(this.getFilesDir(), currentUser.getUserId());
//
//            File parent = file.getParentFile();
//            if(!parent.exists() && !parent.mkdirs()){
//                throw new IllegalStateException("Couldn't create dir: " + parent);
//            }
//
//            fos = this.openFileOutput(file.getName(), Context.MODE_PRIVATE);
//            // fos = new FileOutputStream(file, Context.MODE_PRIVATE);
//            ObjectOutputStream os = new ObjectOutputStream(fos);
//            os.writeObject(plan);
//            os.close();
//            fos.close();
//            System.out.println("successfully saved user to: " + file.getAbsolutePath());
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//            return false;
//        } catch (IOException e) {
//            e.printStackTrace();
//            return false;
//        }
//
//        return true;
//
//    }

    /**
     * Initializes the sign-in and sign-out buttons.
     */
    private void setupSignInButtons() {

        signOutButton = (Button) findViewById(R.id.button_signout);
        signOutButton.setOnClickListener(this);

        signInButton = (Button) findViewById(R.id.button_signin);
        signInButton.setOnClickListener(this);

       // final boolean isUserSignedIn = identityManager.isUserSignedIn();
        //signOutButton.setVisibility(isUserSignedIn ? View.VISIBLE : View.INVISIBLE);
       // signInButton.setVisibility(!isUserSignedIn ? View.VISIBLE : View.INVISIBLE);

    }

    /**
     * Initializes the navigation drawer menu to allow toggling via the toolbar or swipe from the
     * side of the screen.
     */
    private void setupNavigationMenu(final Bundle savedInstanceState) {
        final DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        final ListView drawerItems = (ListView) findViewById(R.id.nav_drawer_items);

        // Create the navigation drawer.
        navigationDrawer = new NavigationDrawer(this, toolbar, drawerLayout, drawerItems,
            R.id.main_fragment_container);



        // Add navigation drawer menu items.
        // Home isn't a demo, but is fake as a demo.
        DemoConfiguration.DemoFeature home = new DemoConfiguration.DemoFeature();
        home.iconResId = R.mipmap.ic_icon_menuhome;
        home.titleResId = R.string.main_nav_menu_item_home;
        navigationDrawer.addDemoFeatureToMenu(home);

navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Meal Tracker", R.mipmap.ic_icon_mealplan,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,  R.string.main_nav_menu_item_meal_fragment,
        new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_meal_fragment, R.mipmap.ic_icon_mealplan, R.mipmap.ic_icon_mealplan, MealFragment.class)));


        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Food List", R.mipmap.ic_icon_foodlist_01,  R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,
                R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,  R.string.main_nav_menu_food_list_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_food_list_fragment, R.mipmap.ic_icon_foodlist_01, R.mipmap.ic_icon_foodlist_01, FoodListFragment.class)));


        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Recipes", R.mipmap.ic_icon_recipelist,  R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,
                R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,  R.string.main_nav_menu_item_purchase_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_purchase_fragment, R.mipmap.ic_icon_recipelist, R.mipmap.ic_icon_recipelist, RecipeFragment.class)));

        navigationDrawer.addDemoFeatureToMenu(new DemoConfiguration.DemoFeature("Store", R.mipmap.ic_icon_purchases,  R.string.main_nav_menu_item_store_fragment,  R.string.main_nav_menu_item_store_fragment,
                R.string.main_nav_menu_item_store_fragment,  R.string.main_nav_menu_item_store_fragment,  R.string.main_nav_menu_item_store_fragment,
                new DemoConfiguration.DemoItem(R.string.main_nav_menu_item_store_fragment, R.mipmap.ic_icon_purchases, R.mipmap.ic_icon_purchases, PurchaseFragment.class)));


        for (DemoConfiguration.DemoFeature demoFeature : DemoConfiguration.getDemoFeatureList()) {
            navigationDrawer.addDemoFeatureToMenu(demoFeature);

        }
        setupSignInButtons();

        ((TextView) findViewById(R.id.userName)).setText("Guest");


        if (savedInstanceState == null) {
            // Add the home fragment to be displayed initially.
          //  navigationDrawer.showTempLoadingScreen();
        }

    }

    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

      //  FontsOverride.setDefaultFont(this, "DEFAULT", "MyFontAsset.ttf");
        FontsOverride.setDefaultFont(this, "MONOSPACE", "fonts/pnbold.otf");
        FontsOverride.setDefaultFont(this, "SERIF", "fonts/pnreg.otf");
        FontsOverride.setDefaultFont(this, "SANS_SERIF", "fonts/pnreg.otf");

        //setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);


        Bundle extras = getIntent().getExtras();
        if (extras != null) {
             //userEmail = extras.getString("USER_EMAIL");
            //The key argument here must match that used in the other activity
        }

        recipeSets = new ArrayList<>();
        dailyFacts = new ArrayList<>();
        progress = new ProgressDialog(this);
        currentlyDownloading = false;





        //for final product do not hard code this!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        //String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx8XiZ9iTtGcmSmYG8JkKd3U37rnxSjhlJYPnBESkMQ4izxSRfV+tNLD0CM+X3ki5D++doyvIh3gmbGrzhQBQCM/qtg5U6pYyPVJQvGmgQFPivWdB/c3dztNAzTqIb/5/iMBG1imQm+z6YYV7yM0xDtDtfA7Hyusuwi2s08FoI72Op8dYKtDX3Xu4bqRw8DAMAaByF+RQH2BWHOEKUatVWKBvjXaYqAl7M7kI36l2ui9KNXhMNeWdSEa+oyD0RODIrGfoeLrEtUOT4VEoVS4+DO3WysontP3HqOH9WQE8g7rH9aH+FwTs931wdK76vlwyD8nOZjoL5uTwA7VxEdMgQwIDAQAB";
        String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj9w0GqYOja+NDy+czZFyoYGCLXY/UeXNECPrIvR56IJDxTJED4o4Vfh5q6X2U+P7bRrnL9EUeRJxBUeXlw71bPZQA8dGYGhMtlgnBKmaQYAUYL5vEmZurSBB/jsyx6Udh6UEDSmnNjmLHvWf6JqIkzI07Y0QjLtEFeMRHoLzjzST1/s6d8CE5jarh+ENl1JJCHcZWo4nmPdd8dA9HUwug3wTdJMUjEOowxC0CYns334FNk2PBjsUrMHHw9OYzztqCYEjIUvT6K7bx9+qxml+W0B+QYvqPyFGxV+fN41Bb0VdVfzt3HRO3WqzEYXLyMAqoFD584cy0niyWWQBPW6NswIDAQAB";
        // compute your public key and store it in base64EncodedPublicKey
//        mHelper = new IabHelper(this, base64EncodedPublicKey);
//
//
//
//       final IabHelper.QueryInventoryFinishedListener mGotInventoryListener
//                = new IabHelper.QueryInventoryFinishedListener() {
//            public void onQueryInventoryFinished(IabResult result,
//                                                 Inventory inventory) {
//
//                if (result.isFailure()) {
//                    // handle error here
//                }
//                else {
//                    // does the user have the premium upgrade?
//                    boolean sampleBool = inventory.hasPurchase("recipetest1");
//                    // update UI accordingly
//                }
//            }
//        };
//
//
//
//        mHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
//            public void onIabSetupFinished(IabResult result) {
//                if (!result.isSuccess()) {
//                    // Oh no, there was a problem.
//                    Log.d("Error", "Problem setting up In-app Billing: " + result);
//                }
//                else{
//                    System.out.println("successfully set up billing dawg");
//                }
//                // Hooray, IAB is fully set up!
//                try {
//                    mHelper.queryInventoryAsync(mGotInventoryListener);
//                } catch (IabHelper.IabAsyncInProgressException e) {
//                    e.printStackTrace();
//                }
//
//            }
//        });
//
//



        // Obtain a reference to the mobile client. It is created in the Application class,
        // but in case a custom Application class is not used, we initialize it here if necessary.

       // AWSMobileClient.initializeMobileClientIfNecessary(this);

        // Obtain a reference to the mobile client. It is created in the Application class.
       // final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();

        // Obtain a reference to the identity manager.
       // identityManager = awsMobileClient.getIdentityManager();

        setContentView(R.layout.activity_main);

        setupToolbar(savedInstanceState);


        setupNavigationMenu(savedInstanceState);


        currentUser = new User(getApplicationContext());

        //will need to pull this from logged in user, in future id rather name name or email will be used for user specific files
        //char[] temp = new char[3];
        //userEmail.getChars(0,3,temp, 0);
        //userEmail = new String(temp);

        //currentUser.setUserId(userEmail);
        //currentUser.setUserName(userEmail);

        currentUser.setUserId("guest");
        currentUser.setUserName("guest");


        ((TextView) findViewById(R.id.userName)).setText(currentUser.getUserName());


        currentUser = LoadUser(currentUser.getUserId());

//fuckkk
//        for (int i = 0; i < currentUser.getRecipeCount(); i++) {
//            recipeSets.add(currentUser.getRecipeSetPath(i));
//        }

        if(currentUser == null){
            currentUser = new User(getApplicationContext());
            currentUser.setUserId("guest");
            currentUser.setUserName("guest");
            SaveUser(currentUser);
            //CreateTempRecipeSetForTesting();
        }



          mServiceConn = new ServiceConnection() {


            @Override
            public void onServiceDisconnected(ComponentName name) {
                mService = null;
            }

            @Override
            public void onServiceConnected(ComponentName name,
                                           IBinder service) {
                mService = IInAppBillingService.Stub.asInterface(service);


                Bundle ownedItems = null;
                try {
                    ownedItems = mService.getPurchases(3, getPackageName(), "inapp", null);

                    int response = ownedItems.getInt("RESPONSE_CODE");
                    if (response == 0) {

                        System.out.println("checking stuff");
                        ArrayList<String> ownedSkus =
                                ownedItems.getStringArrayList("INAPP_PURCHASE_ITEM_LIST");
                        ArrayList<String> purchaseDataList =
                                ownedItems.getStringArrayList("INAPP_PURCHASE_DATA_LIST");
                        ArrayList<String> signatureList =
                                ownedItems.getStringArrayList("INAPP_DATA_SIGNATURE_LIST");
                        String continuationToken =
                                ownedItems.getString("INAPP_CONTINUATION_TOKEN");
                    if(!purchaseDataList.isEmpty()){
                        for (int i = 0; i < purchaseDataList.size(); ++i) {
                            String purchaseData = purchaseDataList.get(i);
                            String signature = signatureList.get(i);
                            String sku = ownedSkus.get(i);

                            // do something with this purchase information
                            // e.g. display the updated list of products owned by user
                            System.out.println("user has purchased " + sku);
                            File file = new File(getFilesDir() + "/recipeSet/", sku);


                            //check to see if set exists without error
                            Boolean test = false;
                            try {

                                FileInputStream fis = new FileInputStream(file);

                                ObjectInputStream is = new ObjectInputStream(fis);
                                RecipeSet recipeSet = (RecipeSet) is.readObject();

                                //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
                                is.close();
                                fis.close();


                                System.out.println("successfully loaded recipe set from  " + file.getAbsolutePath());

                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                                test = true;
                            } catch (IOException e) {
                                test = true;
                                e.printStackTrace();
                            } catch (ClassNotFoundException e) {
                                test = true;
                                e.printStackTrace();
                            } catch (Exception e) {
                                test = true;
                            }

                            //if not then download it and add to user profile
                            if (test)
                                helperDownloadSet(sku);


                            if (!currentUser.checkIfSetIsAdded(file.getAbsolutePath())) {
                                System.out.println("test not added");
                                currentUser.addRecipeSetPath(file.getAbsolutePath());
                                SaveUser(currentUser);
                            }


                        }//end for loop: purchase data list size
                    }
                    else{
                        currentUser.resetPurchases(getApplicationContext());
                        SaveUser(currentUser);
                    }


                        System.out.println("made it to the end");


                        }else if (response == 3){
                        System.out.println(response);
                        currentUser.resetPurchases(getApplicationContext());
                        SaveUser(currentUser);
                    }

                        // if continuationToken != null, call getPurchases again
                        // and pass in the token to retrieve more items


                    unbindMe();

                } catch (RemoteException e) {
                    e.printStackTrace();
                }



            }
        };


        Intent serviceIntent =
                new Intent("com.android.vending.billing.InAppBillingService.BIND");
        serviceIntent.setPackage("com.android.vending");
        bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);


        //must make this dynamic
        checkAndIncrementPlanDay();
        today = currentUser.getCurrentDayOfPlan();


        // getRecipeSetCount()



        //will need to improve this
        recipeSets = currentUser.recipeSetPaths;

//        try {
//
//            FileInputStream fis = new FileInputStream(new File(getContext().getFilesDir() + "/" + ((MainActivity) getActivity()).getUserId(), "currentPlan.ser"));
//
//            ObjectInputStream is = new ObjectInputStream(fis);
//            mealPlan = (MealPlan) is.readObject();
//
//
//            //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
//            is.close();
//            fis.close();
//        } catch (FileNotFoundException e) {
//            e.printStackTrace();
//        } catch (OptionalDataException e) {
//            e.printStackTrace();
//        } catch (StreamCorruptedException e) {
//            e.printStackTrace();
//        } catch (IOException e) {
//            e.printStackTrace();
//        } catch (ClassNotFoundException e) {
//            e.printStackTrace();
//        }

        FileOutputStream fos = null;
        Boolean test = false;
        mealPlan = null;
        try {

            //check to see if default plan was downloaded
            FileInputStream fis = new FileInputStream(new File(this.getFilesDir(), "defaultPlan.ser"));
            ObjectInputStream is = new ObjectInputStream(fis);
            mealPlan = (MealPlan) is.readObject();

//            //if it made it this far then plan was previously downloaded so now we can load user's current plan
//            fis = new FileInputStream(new File(this.getFilesDir() + "/" + getUserId(), "currentPlan.ser"));
//            is = new ObjectInputStream(fis);
//            mealPlan = (MealPlan) is.readObject();


            for (int i = 0; i < mealPlan.getDays(); i++) {
                dailyFacts.add(i, mealPlan.getDailyFacts(i));
            }

            //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
            is.close();
            fis.close();

            navigationDrawer.showHome();


            System.out.println("successfully loaded mealPlan");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            test = true;
        } catch (IOException e) {
            test = true;
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            test = true;
            e.printStackTrace();
        }
        catch(Exception e){
            test = true;
        }

        if(test) {

            System.out.println("failure to launch");

           // showWheel();

            switchToWelcomeFragment();

                //String jsonPlan = sendGET("http://ec2-52-52-65-150.us-west-1.compute.amazonaws.com:3000/meal-plans");
            downloadEverything();

        }
        else{
            //set the main meal plan to current users plan, if they do not have a plan it will be
            //created from the default plan
            testCreateCurrentPlan();
            ((DrawerLayout) findViewById(R.id.drawer_layout)).setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);


        }







        //navigationDrawer.showTempLoadingScreen();

//        //will need to check if online
//        IdentityManager.IdentityHandler idHandler = new IdentityManager.IdentityHandler() {
//            @Override
//            public void handleIdentityID(String identityId) throws IOException, JSONException {
//                currentUser = LoadUser(identityId);
//                if(currentUser == null){
//                    currentUser = new User();
//                    currentUser.setUserName(identityManager.getUserName());
//                    currentUser.setUserId(identityId);
//                    SaveUser(currentUser);
//                }
//            }
//
//            @Override
//            public void handleError(Exception exception) {
//                System.out.println("didnt work");
//
//            }
//        };
//
//        identityManager.getUserID(idHandler);






        //delete this after testing
        planInt = 0;
    }

    ArrayList<MealItem> getListForDayMain(int day){
        //  ArrayList<MealItem> ar//= mealPlan.elementAt(day)
        return mealPlan.getListForDay(day);
    }

    public int getShakesNeededPerDayMain(int day) {
        return mealPlan.getShakesNeededPerDay(day);
    }


    public int getShakesSelectedPerDayMain(int day) {
        return mealPlan.getShakesSelectedPerDay(day);
    }

    public void setShakesSelectedPerDayMain(int day, int count) {
        mealPlan.setShakesSelectedPerDay(day, count);
    }

    void swapMealMain(int day, int mealNum, MealItem newMeal){
        mealPlan.swapMeal(day, mealNum, newMeal);
    }


    int getWaterForDayMain(int day){return mealPlan.getWaterForDay(day);}
    void saveWaterForDayMain(int day, int progress){ mealPlan.saveWaterForDay(day, progress);}


    void testCreateCurrentPlan(){
        //check to see if user has a plan file
        Boolean test = false;
        try {

            FileInputStream fis = new FileInputStream(new File(this.getFilesDir() + "/" + getUserId(), "currentPlan.ser"));

            ObjectInputStream is = new ObjectInputStream(fis);
            mealPlan = (MealPlan) is.readObject();

            //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
            is.close();
            fis.close();

            navigationDrawer.showHome();


            System.out.println("successfully loaded currentPlan " + currentUser.getUserId() );

        } catch (FileNotFoundException e) {
            e.printStackTrace();
            test = true;
        } catch (IOException e) {
            test = true;
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            test = true;
            e.printStackTrace();
        }
        catch(Exception e){
            test = true;
        }

        //if not then create it
        if(test) {

            File dst = new File(this.getFilesDir() + "/" + getUserId(), "currentPlan.ser");
            File src = new File(this.getFilesDir(), "defaultPlan.ser");


            File parent = dst.getParentFile();
            if(!parent.exists() && !parent.mkdirs()){
                throw new IllegalStateException("Couldn't create dir: " + parent);
            }


            FileInputStream in = null;
            FileOutputStream out = null;
            try {
                in = new FileInputStream(src);
                out = new FileOutputStream(dst);

                // Transfer bytes from in to out
                byte[] buf = new byte[1024];
                int len;
                while ((len = in.read(buf)) > 0) {
                    out.write(buf, 0, len);
                }
                in.close();
                out.close();

                System.out.println("save to " + dst.getAbsolutePath());

                FileInputStream fis = new FileInputStream(new File(this.getFilesDir() + "/" + getUserId(), "currentPlan.ser"));

                ObjectInputStream is = new ObjectInputStream(fis);
                mealPlan = (MealPlan) is.readObject();

                //System.out.println(((MealPlan) is.readObject()).getListForDay(0).get(0).isCompleted() + " better be right");
                is.close();
                fis.close();


            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }

        }
    }

    @Override
    protected void onResume() {
        super.onResume();
//        if (!AWSMobileClient.defaultMobileClient().getIdentityManager().isUserSignedIn()) {
//            // In the case that the activity is restarted by the OS after the application
//            // is killed we must redirect to the splash activity to handle the sign-in flow.
//          //  Intent intent = new Intent(this, SplashActivity.class);
//          //  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
//          //  startActivity(intent);
//            return;
//        }
//
//        final AWSMobileClient awsMobileClient = AWSMobileClient.defaultMobileClient();
    }

    void unbindMe(){
        if (mService != null) {
            if(mServiceConn != null)
                unbindService(mServiceConn);
            System.out.println("unbound");
        }
    }

    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        // Handle action bar item clicks here excluding the home button.

        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onSaveInstanceState(final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        // Save the title so it will be restored properly to match the view loaded when rotation
        // was changed or in case the activity was destroyed.
        if (toolbar != null) {
            bundle.putCharSequence(BUNDLE_KEY_TOOLBAR_TITLE, toolbar.getTitle());
        }
    }

    @Override
    public void onClick(final View view) {
//        if (view == signOutButton) {
//            // The user is currently signed in with a provider. Sign out of that provider.
//            //identityManager.signOut();
//            // Show the sign-in button and hide the sign-out button.
//            signOutButton.setVisibility(View.INVISIBLE);
//            signInButton.setVisibility(View.VISIBLE);
//
//            // Close the navigation drawer.
//            navigationDrawer.closeDrawer();
//            return;
//        }
//        if (view == signInButton) {
//            // Start the sign-in activity. Do not finish this activity to allow the user to navigate back.
//            startActivity(new Intent(this, SignInActivity.class));
//            // Close the navigation drawer.
//            navigationDrawer.closeDrawer();
//            return;
//        }
        // ... add any other button handling code here ...

    }

    @Override
    protected void onPause() {
        super.onPause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
//        if (mHelper != null) try {
//            mHelper.dispose();
//        } catch (IabHelper.IabAsyncInProgressException e) {
//            e.printStackTrace();
//        }
//        mHelper = null;
    }

    @Override
    public void onBackPressed() {
        final FragmentManager fragmentManager = this.getSupportFragmentManager();
        
        if (navigationDrawer.isDrawerOpen()) {
            navigationDrawer.closeDrawer();
            return;
        }

        if (fragmentManager.getBackStackEntryCount() == 0) {

            if (fragmentManager.findFragmentByTag("Home Fragment") == null) {
                Fragment fragment;
                String fragmentName;


                // Clear back stack when navigating from the Nav Drawer.
                fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                fragment = new HomeFragment();
                fragmentName = "Home Fragment";


                getSupportFragmentManager()
                        .beginTransaction()
                        .replace(R.id.main_fragment_container, fragment, fragmentName)
                        .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                        .commit();

                return;
            }

        }

        super.onBackPressed();
    }

    boolean isPlanEmpty(){
        return jsonPlan1.isEmpty();
    }

    void setPlan(String jsonString){
        jsonPlan1 = jsonString;
    }

    String getJSONPlan(){
        return jsonPlan1;
    }

    void downloadEverything(){
        DownloadPlan dl = new DownloadPlan();
        MyTaskParams mtp = new MyTaskParams("http://52.52.65.150:8080/mealplan", getApplicationContext());
        dl.execute(mtp);
    }

    void showHome(){
        navigationDrawer.showHome();
    }

    int getDayOfPlan(){
        return today;
    }

    int getPlanInt(){
        return planInt;
    }

    void setPlanInt(int num){
        planInt =  num;
    }

    DailyFacts getTodaysFacts(){
        System.out.println("getting fact for " + today);
         return dailyFacts.get(today);
    }

    String getDailyInspirationMain(int day){
        return dailyFacts.get(day).dailyInspiration;
    }

    void toggleCompletionMain(int day, int meal){
        mealPlan.toggleCompletion(day, meal);
    }

    Boolean isCompletedMain(int day, int meal){
        return mealPlan.isCompleted(day, meal);
    }


    //need a function to return username from main
    {

    }


    void switchToWelcomeFragment(){

        Fragment fragment;
        String fragmentName;

        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        // fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

        fragment = new LoadingFragment();
        fragmentName = "Welcome";

        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previous fragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

    void switchToQuizFragment(){

        Fragment fragment;
        String fragmentName;

        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
       // fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

                fragment = new QuizFragment();
                fragmentName = "Quiz";

        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previous fragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function



    void switchToPurchaseFragment(){

        Fragment fragment;
        String fragmentName;

        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        // fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);

        fragment = new PurchaseFragment();
        fragmentName = "Store";

        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .addToBackStack("previous fragment")
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

//    void switchToPurchaseFragment(String planInfo, String planDesc){
//
//        Fragment fragment;
//        String fragmentName;
//
//
//
//
//        final FragmentManager fragmentManager = getSupportFragmentManager();
//
//        // Clear back stack when navigating from the Nav Drawer.
//        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
//
//        fragmentName = "Purchase Fragment";
//        fragment = new PurchaseFragment();
//        fragment.setArguments(bundle);
//
//
//
//        getSupportFragmentManager()
//                .beginTransaction()
//                .replace(R.id.main_fragment_container, fragment, fragmentName)
//                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
//                .addToBackStack("previousFragment")
//                .commit();
//
//        // Set the title for the fragment.
//        final ActionBar actionBar = getSupportActionBar();
//        if (actionBar != null) {
//            actionBar.setTitle(fragmentName);
//        }
//    }//end switch fragment function

    void switchToFoodListFragment(){

        Fragment fragment;
        String fragmentName;


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        fragment = new FoodListFragment();
        fragmentName = "Food List";


        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .addToBackStack("previousFragment")
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function


    void switchToPlanFragment(){

        Fragment fragment;
        String fragmentName;


        final FragmentManager fragmentManager = getSupportFragmentManager();

        // Clear back stack when navigating from the Nav Drawer.
        //fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        fragment = new MealFragment();
        fragmentName = "Meal Fragment";


        getSupportFragmentManager()
                .beginTransaction()
                .replace(R.id.main_fragment_container, fragment, fragmentName)
                .addToBackStack("previousFragment")
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)
                .commit();

        // Set the title for the fragment.
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle(fragmentName);
        }
    }//end switch fragment function

    String getUserId(){
        return currentUser.getUserId();
    }

   // public IabHelper getIabHelper(){
   //     return mHelper;
   // }

    public void hideWheel(){

        progress.dismiss();
    }

    public void setPlanDay(int day){
        today = day;
    }


    private static long daysBetween(Calendar startDate, Calendar endDate) {
        long end = endDate.getTimeInMillis();
        long start = startDate.getTimeInMillis();
        return TimeUnit.MILLISECONDS.toDays(Math.abs(end - start));
    }

    public void checkAndIncrementPlanDay(){
        Calendar checkDay = Calendar.getInstance();

        long daysBet = daysBetween(currentUser.getCurrentCalendarInstance(),checkDay);
        System.out.println("testing for now " + currentUser.getCurrentCalendarInstance().getTime() + "      " + checkDay.getTime() + "   days bet " + daysBet);

        if(daysBet >= 10){
            currentUser.setCurrentDayOfPlay(10);
            setPlanDay(10);
        }
       else if(daysBet != today){
            currentUser.setCurrentDayOfPlay((int)daysBet);
            setPlanDay((int) daysBet);
        }
    }

    public void showWheel(){

        progress.setMessage("INITIALIZING FIRST TIME LAUNCH DATA...PLEASE WAIT) ");
        progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        progress.setIndeterminate(true);
        progress.show();
    }


    Boolean doneDownloading(){
        return currentlyDownloading;
    }

    int getRecipeSetCount(){
        return recipeSets.size();
    }

    String getSetPath(int i){
        return recipeSets.get(i);
    }

    //try to sort it in this function
    void addSetURL(String url){
        recipeSets.add(url);
    }

    ArrayList<DailyFacts> dailyFacts;
    ArrayList<String> recipeSets;

    int today;
    Boolean currentlyDownloading;


}





